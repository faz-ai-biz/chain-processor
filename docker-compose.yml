services:
  # Database service
  postgres:
    image: postgres:14-alpine
    container_name: chain-processor-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: chain_processor
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chain_processor"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chain-processor-network

  # Base image with shared libraries
  base:
    build:
      context: .
      dockerfile: Dockerfile.base
    image: core-chain-nlp-base:latest

  # API service
  api:
    build: 
      context: .
      dockerfile: ./chain-processor-api/Dockerfile
    container_name: chain-processor-api
    entrypoint: ["/app/chain-processor-api/scripts/entrypoint.sh"]
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/chain_processor
      - CORS_ORIGINS=["*"]
      - LOG_LEVEL=INFO
    ports:
      - "8095:8000"
    depends_on:
      base:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    networks:
      - chain-processor-network

  # Core service
  core:
    build:
      context: .
      dockerfile: ./chain-processor-core/Dockerfile
    container_name: chain-processor-core
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/chain_processor
    depends_on:
      base:
        condition: service_completed_successfully
      api:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - chain-processor-network

  # PGAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: chain-processor-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - chain-processor-network

networks:
  chain-processor-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local 